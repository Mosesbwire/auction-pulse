<%- include('./partials/head') %>
<body>
    <main class="row">
        <div class="documentation">
            <header class="navbar sticky-top bg-light flex-md-no-wrap border-bottom">
                <p class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6"></p>
                <nav class="navbar navbar-expand-lg bg-body-tertiary">
                    <div class="container-fluid">
                      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
                        <div class="navbar-nav">
                          <a class="nav-link" href="v1/auctioneers/login">Sign in</a>
                          
                        </div>
                      </div>
                    </div>
                  </nav>
            </header>
            <div class="mt-3 documentation-content">
                <div>
                    <h2>Introduction</h2>
                    <p>The Auction Pulse API enables users to seamlessly create and manage live auctions through socket connections, providing a dynamic and real-time experience for both auctioneers and participants.</p>
                    <p>Auction Pulse is tailored for developers, businesses, and platforms looking to integrate live auction functionality into their applications. With our API, you can harness the speed and responsiveness of WebSockets to create auctions that unfold in real-time, offering a captivating and engaging experience for bidders.</p>
                    <div>
                        <h3>Key Features</h3>
                        <ul>
                            <li><strong>Real-time Auctions</strong>: Utilize WebSockets to establish live connections, ensuring that auctions unfold dynamically, with updates delivered instantaneously to all participants.</li>
                            <li><strong>Flexible auction management</strong>: Empower users to seamlessly manage their auctions, from creating and updating listings to monitoring bidding activity and closing auctions with precision.</li>
                        </ul>
                    </div>
                </div>
                <div>
                    <h2>Authentication</h2>
                    <p>To begin, users need to sign up for an Auction Pulse account. Once registered, navigate to api key to get your authentication token. This token serves as your key to the Auction Pulse API and should be kept confidential.</p>
                    <p>Authentication is done through the http bearer authentication scheme.The token should be placed in your Authorization header</p>
                    <p>Requests without a token will fail.</p>
                    
                    <code class="code">
                        Authorization: Bearer {Your token here}
                    </code>
                    
                </div>
                
                <div>
                    <h2>Resources</h2>
                    <div>
                        <div class="accordion accordion-flush" id="accordionFlushExample">
                            <div class="accordion-item">
                              <h2 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                                  Auction end points
                                </button>
                              </h2>
                              <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
                                <div class="accordion-body">
                                    <div class="row">
                                        <div class="col border">
                                            <p>POST <code>api/v1/auctions</code></p>
                                        </div>
                                        <div class="col-6">
                                            <p>Create an auction</p>
                                            <p>Request body Json format</p>
                                            <code>
                                                {
    
                                                    "auctionData": {
                                                        "startDate": "2024-01-12T09:45",
                                                        "bidIncrement": 5000,
                                                        "start": true,
                                                        "timer": 60
                                                    },
                                                    "itemData": {
                                                        "reservePrice": 500000,
                                                        "title": "Rolex"
                                                    }
                                                }                   </code>
                                            <p>Required parameters</p>
                                            <ul>
                                                <li><code>bidIncrement</code>: represents the amount the bids will be increased by</li>
                                                <li><code>timer</code>: represents time in seconds between which bidders can place competing bid. If timer runs down to zero the auction ends and stading bid is declared winner.</li>
                                                <li><code>reservePrice</code>: the price at which the bidding will start at</li>
                                                <li><code>startDate</code>: this should be a datetime in the future, thus scheduling your auction to be <code>open</code> at the stated date.</li>
                                                <p>startDate format <code>YYYY-MM-ddT:HH:MM</code></p>
                                                <li><code>start</code>: boolean value representing if the auction starts immediately on creation if true otherwise if false the auction will be pending and will run at the future date as specified in startDate</li>
                                            </ul>
                                            
                                        </div>
                                        <div class="col">
                                            <p>Response Json</p>
                                            <code>
                                                {
                                                    "_id": "659dc3df1a4f2a5a77e9e5c0",
                                                    "auctioneer": "657b765c0c860dd98910bb0b",
                                                    "status": "open",
                                                    "startDate": "2024-01-19T07:05:43.166Z",
                                                    bids: []
                                                    "bidIncrement": 5000,
                                                    "timer": 60,
                                                    "item": {
                                                        "title": "rolex",
                                                        "reservePrice": 500000,
                                                        "_id": "659dc3df1a4f2a5a77e9e5c1"
                                                    },
                                                    
                                                }
                                            </code>
                                        </div>
                                    </div>
                                    <div class="row border-top border-end border-start">
                                        <div class="col border-end">
                                            <p>GET <code>api/v1/auctions</code></p>
                                        </div>
                                        <div class="col-9">
                                            Returns all your auctions
                                        </div>
                                    </div>
                                    <div class="row border-top border-end border-start">
                                        <div class="col border-end">
                                            <p>GET <code>api/v1/auctions/:id</code></p>
                                        </div>
                                        <div class="col-9">
                                            <p>Returns the requested auctions</p>
                                            <p>Returns 404 error if acution is not found</p>
                                        </div>
                                    </div>
                                    <div class="row border-top border-end border-start">
                                        <div class="col border-end">
                                            <p>PUT <code>api/v1/auctions/:id</code></p>
                                        </div>
                                        <div class="col-9">
                                            <p>Updates the auction</p>
                                            <p>Only auctions in a pending state can be updated</p>
                                        </div>
                                    </div>
                                    <div class="row border-top border-end border-start border-bottom">
                                        <div class="col border-end">
                                            <p>DELETE <code>api/v1/auctions/:id</code></p>
                                        </div>
                                        <div class="col-9">
                                            <p>Deletes the specified auction</p>
                                            <p>Only auctions in a pending or closed status can be deleted</p>
                                        </div>
                                    </div>

                                </div>
                              </div>
                            </div>
                            <div class="mt-4">
                                <h3>Client Implentation</h3>
                                <p>The api is built on socket.io, this section covers only the areas needed to get the client side working. For more information on socket.io you can check out its <a href="https://socket.io/docs/v4">documentation</a></p>
                                <div>
                                    <h5>Initialization</h5>
                                    <p>The socket.io client can be implemented from npm or a cdn </p>
                                    <p class="base-url">Use this base url when initializing the socket instance https://auction-pulse-api.onrender.com?id={auctionId}</p>
                                    <p>npm</p>
                                    <code class="code">npm install socket.io-client</code>
                                    <p>For the code samples showing how to implement the client, we will use socket.io from a cdn.</p>
                                    <p>On initialization, you will need to provide a unique identifier for each client. The unique identifier shall be used as the identity of the winner.</p>
                                    <p>The identifier can either be an id or an email address.</p>
                                    
<pre>
    <code>
        import { io } from "https://cdn.socket.io/4.7.3/socket.io.esm.min.js";
        const socket = io('https://auction-pulse-api.onrender.com?id=65a15c90f46c2aaba6fff699', {
        auth: {
            userId: '100',
                                                    
        },
        });
    </code>
 </pre>
                                    <p class="warning"><strong>Warning: </strong>Client request without a userId will lead to an unauthorized request. It is requred you provide a userId.</p>
                                    <p>Further reading on socket <a href="https://socket.io/docs/v4/">initialization</a></p>
                                    <div class="parent">
                                        <h5>Events</h5>
                                        <p>Emitting Events</p>
                                        <p>The server listens for only two events from the client</p>
                                        <ul>
                                            <li>bid</li>
                                            <li>custom bid</li>
                                        </ul>
                                        <p><code>bid</code></p>
                                        <p>This event is emitted whenever a client places their bid on an item. This event does not need any data from the client. This event updates the current standing bid of the item, according to the bidIncrement amount provided when creating the auction.</p>
                                        <p>If current standing bid is kshs.10000, the auction has a bidIncrement of 5000. Thus the new standingBid will increase by 5000 to 15000.</p>
<pre>
    <code>
        import { io } from "https://cdn.socket.io/4.7.3/socket.io.esm.min.js";
        const socket = io('http://localhost:5000?id=65a15c90f46c2aaba6fff699', {
            auth: {
                userId: '100',
                                                        
            },
        });
        const bidBtn = document.getElementById('bidBtn');
        bidBtn.addEventListener('click', ()=> {
            socket.emit('bid');
        })
    </code>
</pre>
                                        <p><code>custom bid</code></p>
                                        <p>A custom bid allows the user to specify a bid amount they wish to place. The amount being placed must be higher than the current standing bid. If amount is lower an error appError event will be emitted from the server</p>
                                        <p>The data object to be sent with a custom bid takes the following form <code>{bid: amount}.</code></p>
                                        <p>In this example the current standing bid is Ksh.10000. For the bid to be correct, the amount must be higher than kshs.10000</p>
<pre>
    <code>
        import { io } from "https://cdn.socket.io/4.7.3/socket.io.esm.min.js";
        const socket = io('http://localhost:5000?id=65a15c90f46c2aaba6fff699', {
            auth: {
                userId: '100',
                                                        
            },
        });
        const bidBtn = document.getElementById('bidBtn');
        bidBtn.addEventListener('click', ()=> {
            socket.emit('custom bid', {bid: 11000});
        })
    </code>
</pre>
                                    </div>
                                    <div>
                                        <p>Listening for events</p>
                                        <p>The server emits 5 events that the client can listen for.</p>
                                        <div>
                                            <p>update</p>
                                            <p>This event updates all users with the current bid of the item they are bidding for.</p>
<pre>
    <code>
        const currentBid = document.getElementById('currentBid');
        socket.on('update', (data) => {
            currentBid.innerText = data.bid;
        })
    </code>
</pre>
                                        </div>
                                        <div>
                                            <p>countdown</p>
                                            <p>This event provides a countdown timer that shows time remaining, before the current standing bid is declared as winner of aution. This value is provided during creation of an aution in seconds</p>
                                            <p>When a bid is placed before the timer ends, it will reset to it original value</p>
<pre>
    <code>
        const countdown = document.getElementById('countdown');
        socket.on('countdown', (data) => {
            countdown.innerText = data;
        })
    </code>
</pre>
                                        </div>
                                    </div>
                                    <div>
                                        <p>appError</p>
                                        <p>The appError event is only sent to the socket/user that experiences an error. If a user sends an invalid bid only that user will receive the error.</p>
                                        <p>The appError is also emitted if a user tries to access an auction that has a pending or closed status.</p>
<pre>
    <code>
        const errBanner = document.getElementById('err-banner');
        socket.on('appError', (data) => {
            // data -> {name: 'ClientError', message: 'Invalid bid amount.', status: 400}
                                    
            errBanner.innerText = data.message;
        })
    </code>
</pre>
                                    </div>
                                    <div>
                                        <p>close</p>
                                        <p>This event is emitted if the timer runsdown to 0. This signals the end of the auction. The event is sent to all users that are bidding for the same item</p>
                                        <p>No bids are accepted after this event has been emitted.</p>
<pre>
    <code>
        const infoBanner = document.getElementById('info-banner');
        socket.on('close', (data) => {
        // data -> {standingBid: 250000, message: 'This auction has closed.', item: 'Toyota vitz'}
                                    
            errBanner.innerText = 'ITEM: ${data.item} has sold at ${data.standingBid}';
        })
    </code>
</pre>
                                    </div>
                                    <div>
                                        <p>welcome</p>
                                        <p>The welcome event is emitted when the socket makes a succeddful connection. The event is only sent to the specific user.</p>
                                        <p>The event provides information on about the auction</p>
<pre>
    <code>
        const infoBanner = document.getElementById('info-banner');
        socket.on('welcome', (data) => {
            // data -> {bidIncrement: 1000, item: 'Toyota vitz', }
                                    
                                    
        })
    </code>
</pre>
                                    </div>
                                    <div>
                                        <p>connect_error</p>
                                        <p>This is a native socket.io event. The event is emitted if a socket attempt at connection fails. It can alse be emitted due to middleware </p>

                                        <p>This event will be emitted if the socket was not initiailized with a userId in the auth parameter as earlier illustrated in the initialization section.</p>
<pre>
    <code>
        const errBanner = document.getElementById('err-banner');
        socket.on('connect_error', (data) => {
            //data -> {name: 'ClientError', message: 'Unauthorized request', status: 401}
            errBanner.innerText = data.message
                                    
        })
    </code>
</pre>
                                    </div>
                                </div>
                                </div>
                            </div>
                    </div>
                </div>
                
            </div>
        </div>
    </main>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
</body>
</html>




                                        